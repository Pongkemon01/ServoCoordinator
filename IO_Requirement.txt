I/O requirement (Total 31 inputs and 42 outputs = 75 GPIOs)
===
Encoder+Home : 3-bit input per motor. Total 12+6 inputs.
Pulse+Direction : 2-bit output per motor. Total 12 outputs.
Control signal : 3-bit output (Servo_on, Alarm_reset, Deviation_clr) and 2-bit input (Alarm_status, Positioning_complete). Total 18 outputs + 12 inputs.
Emergency stop : 1-bit input
Status LED (Bi-color) : 2-bit output per LED. 1 LED per 1 motor. Total 12 outputs.
I2C for extension (Optional) : SCL SDA

I/O assignment (79 GPIO pins available)
===
Emergency button : PE0
Encoder : PE[13:2]
Home : PG0, PG1, PG2, PG3, PG9, PG14 (All PG)
Control signal (input){alrm_stat+pos_cmplt}: {PF6+PF0}, {PF7+PF1}, {PF8+PF2}, {PF9+PF3}, {PF10+PF4}, {PF12+PF5}

Status LED : PC0, PC2, PC3, PC6, PC7, PC8, PC9, PC10, PC11, PC12, PD15, PF13 (All PC) (2 Ps)
{Pulse+Direction} : {PD0+PD6}, {PD1+PD7}, {PD2+PD11}, {PD3+PD12}, {PD4+PD13}, {PD5+PD14}
Control signal (output){sv_on+alrm_res+dev_clr} : {PB5+PB0+PA3}, {PB6+PB1+PA4}, {PB8+PB2+PA5}, {PB19+PA0+PA6}, {PB12+PF14+PA7}, {PB15+PF15+PA15}

I2C(module 2)(Optional) : SCL=PB10, SDA=PB11

Pin direction
===
PA : Output
PB : Output (Except PB10 and PB11 opereates as I2C)
PC : Output
PD : Output
PE : Input
PF : Input (Except PF13, PF14, and PF15 are output)
PG : Input

Unused I/O
===
PE14(in), PE15(in) : Available for external interrupt pins
PB3(JTDO), PB4(NJTRST)

Special function on GPIO after reset
===
The debug pins are in AF pull-up/pull-down after reset (Be careful):
PA15: JTDI in pull-up (input)
PB4: NJTRST in pull-up (input)
PB3: JTDO in floating state (output)

The following is CubeMX code to release PB3 and PB4 but it is better to avoid using these pins (especially PB3)
static void MX_GPIO_Init(void)
{
    GPIO_InitTypeDef GPIO_InitStruct;
    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOB_CLK_ENABLE();
    __HAL_RCC_GPIOA_CLK_ENABLE();
    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_3, GPIO_PIN_RESET);
    /*Configure GPIO pins : PB4 PB3 */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}
